# Generated by Django 2.2.8 on 2020-04-21 14:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('lab', '0016_auto_20200214_1326'),
    ]

    operations = [
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.CharField(max_length=200)),
                ('exp_type', models.CharField(choices=[('GROWTH', 'Growth'), ('IMPLANT', 'Ionic Implantation')], default='GROWTH', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.TextField()),
                ('wu', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('billing', models.CharField(choices=[('SPECTRO', 'Optical Spectroscopy'), ('TEM', 'Electronic Microscopy'), ('PREPA', 'Sample Preparation'), ('MEBA', 'Advanced MEB'), ('FIBCR', 'FIB Clean Room'), ('SOFT', 'Soft Matter'), ('MATCARAC', 'PS2I'), ('MAGNETIC', 'Magnetic Measurement'), ('CHEM', 'Chemistry'), ('CLEANR', 'Clean Room Processes'), ('UHVI', 'UHV Imagery'), ('LT4', 'LT-UHV 4 tips'), ('DUFG', 'Growth DUF'), ('NEARF', 'Near-field microscopy'), ('GROWTHIMP', 'Growth and Implantation'), ('MECA', 'Mechanic Service'), ('ELEC', 'Electronic Service')], default='SPECTRO', max_length=200)),
                ('duration', models.PositiveIntegerField(default=0)),
                ('date_from', models.DateField(default=django.utils.timezone.now)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='implant.Experiment')),
                ('extraction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='implant_record_related', related_query_name='implant_records', to='lab.Extraction')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implant_record_related', related_query_name='implant_records', to='lab.Group')),
                ('project', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='implant_record_related', related_query_name='implant_records', to='lab.Project')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='implant_record_related', related_query_name='implant_records', to='lab.User')),
            ],
            options={
                'ordering': ['submitted'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalRecord',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.TextField()),
                ('wu', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('billing', models.CharField(choices=[('SPECTRO', 'Optical Spectroscopy'), ('TEM', 'Electronic Microscopy'), ('PREPA', 'Sample Preparation'), ('MEBA', 'Advanced MEB'), ('FIBCR', 'FIB Clean Room'), ('SOFT', 'Soft Matter'), ('MATCARAC', 'PS2I'), ('MAGNETIC', 'Magnetic Measurement'), ('CHEM', 'Chemistry'), ('CLEANR', 'Clean Room Processes'), ('UHVI', 'UHV Imagery'), ('LT4', 'LT-UHV 4 tips'), ('DUFG', 'Growth DUF'), ('NEARF', 'Near-field microscopy'), ('GROWTHIMP', 'Growth and Implantation'), ('MECA', 'Mechanic Service'), ('ELEC', 'Electronic Service')], default='SPECTRO', max_length=200)),
                ('duration', models.PositiveIntegerField(default=0)),
                ('date_from', models.DateField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('experiment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='implant.Experiment')),
                ('extraction', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='implant_records', to='lab.Extraction')),
                ('group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='implant_records', to='lab.Group')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='implant_records', to='lab.Project')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='implant_records', to='lab.User')),
            ],
            options={
                'verbose_name': 'historical record',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
